import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

void main() {
  runApp(MaterialApp(
    title: 'Your Weather App',
    home: MyApp(),
  ));
}
class WeatherData {
  final String city;
  final double temperature;
  final double maxTemperature;
  final double minTemperature;
  final double windSpeed;
  final String icon;
  final String description;

  WeatherData({
    required this.city,
    required this.icon,
    required this.temperature,
    required this.maxTemperature,
    required this.minTemperature,
    required this.windSpeed,
    required this.description,
  });
}

class WeatherApi {
  // ... (no changes to this class)
  final String apiKey = ;
  Future<WeatherData> fetchWeather(String city) async {
    try {
      final response = await http.get(Uri.parse(
          'https://api.openweathermap.org/data/2.5/weather?q=$city&appid=$apiKey'));

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final cityName = data['name'];
        final icon = data['weather'][0]['icon'];
        final temp = data['main']['temp'] - 273.15; // Convert to Celsius
        final maxTemp = data['main']['temp_max'] - 273.15; // Max temperature
        final minTemp = data['main']['temp_min'] - 273.15; // Min temperature
        final windSpeed = data['wind']['speed']; // Wind speed
        final description = data['weather'][0]['description'];

        return WeatherData(
          city: cityName,
          icon: icon,
          temperature: temp,
          maxTemperature: maxTemp,
          minTemperature: minTemp,
          windSpeed: windSpeed,
          description: description,
        );
      } else {
        throw Exception(
            'Failed to load weather data. Status code: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error fetching weather data: $e');
    }
  }
}

// ... (rest of the code remains the same)



class MyApp extends StatelessWidget {
  final WeatherApi weatherApi = WeatherApi();
  final TextEditingController cityController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Weather App',
      home: Scaffold(
        appBar: AppBar(title: Text('Weather App')),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              TextField(
                controller: cityController,
                decoration: InputDecoration(labelText: 'Enter City Name'),
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: () async {
                  final cityName = cityController.text;
                  try {
                    final weatherData = await weatherApi.fetchWeather(cityName);
                    _showWeatherUI(context, weatherData);
                  } catch (e) {
                    _showErrorDialog(context, 'Failed to fetch weather data. Please check your input and try again.');
                  }
                },
                child: Text('Get Weather'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _showWeatherUI(BuildContext context, WeatherData weatherData) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => Scaffold(
          appBar: AppBar(title: Text(weatherData.city)),
          body: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Image.network(
                  // Replace with the actual URL for the weather icon
                  'https://openweathermap.org/img/w/${weatherData.icon}.png',
                  height: 100,
                  width: 100,
                ),
                SizedBox(height: 16),
                Text(
                  '${weatherData.temperature.toStringAsFixed(1)}°C',
                  style: TextStyle(fontSize: 30),
                ),
                SizedBox(height: 8),
                Text(
                  'Max: ${weatherData.maxTemperature.toStringAsFixed(1)}°C, Min: ${weatherData.minTemperature.toStringAsFixed(1)}°C',
                  style: TextStyle(fontSize: 18),
                ),
                SizedBox(height: 8),
                Text(
                  'Wind Speed: ${weatherData.windSpeed} m/s',
                  style: TextStyle(fontSize: 18),
                ),
                SizedBox(height: 8),
                Text(
                  weatherData.description,
                  style: TextStyle(fontSize: 18),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _showErrorDialog(BuildContext context, String errorMessage) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Error'),
        content: Text(errorMessage),
      ),
    );
  }
}
